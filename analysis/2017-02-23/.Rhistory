else
dval=dis
#if disease is blank will get all diseases
ind=grep(paste(tolower(dval),paste(study,'$',sep=''),sep='_'),all.studies$cancer_study_id)
print(paste('found',length(ind),study,'samples for disease',dis))
if(length(ind)==0)
return(NULL)
mycancerstudy<-all.studies$cancer_study_id[ind]
if(study=='tcga')
mycancerstudy=intersect(mycancerstudy,paste(tcga.cancer.types,study,sep='_'))
else if(study=='mskcc')
mycancerstudy=intersect(mycancerstudy,paste(mskcc.cancer.types,study,sep='_'))
else if(study=='broad')
mycancerstudy=intersect(mycancerstudy,paste(broad.cancer.types,study,sep='_'))
expr.list<-lapply(mycancerstudy,function(cs){
print(paste(cs,study,'Mutation data'))
caseLists<-getCaseLists(mycgds,cs)
allprofs<-getGeneticProfiles(mycgds,cs)[,1]
profile=allprofs[grep('mutations',allprofs)]
seqSamps=caseLists$case_list_id[grep('sequenced',caseLists$case_list_id)]
gene.groups=split(all.genes, ceiling(seq_along(all.genes)/400))
dat<-lapply(gene.groups,function(g) getProfileData(mycgds,g,profile,seqSamps))
ddat<-matrix()
for(i in which(sapply(dat,nrow)!=0)){
ddat<-cbind(ddat,dat[[i]])
}
nans<-which(apply(ddat,2,function(x) all(is.nan(x)||is.na(x))))
# nas<-which(apply(ddat,2,function(x) all(is.na(x))))
ddat<-ddat[,-nans]
##now set to binary matrix
dfdat<-apply(ddat,1,function(x){
sapply(unlist(x),function(y) !is.na(y) && y!='NaN')
})
return(dfdat)
})
if(length(expr.list)>1){
comm.genes<-c()#rownames(expr.list[[1]])
for(i in 1:length(expr.list))
comm.genes<-union(comm.genes,rownames(expr.list[[i]]))
full.dat<-do.call('cbind',lapply(expr.list,function(x){
missing<-setdiff(comm.genes,rownames(x))
print(length(missing))
if(length(missing)>0)
dat<-rbind(x[intersect(rownames(x),comm.genes),],
t(sapply(missing,function(y,x) rep(FALSE,ncol(x)),x)))
else{
dat<-x[intersect(rownames(x),comm.genes),]
}
colnames(dat)<-colnames(x)
dat<-dat[comm.genes,]
return(dat)
}))
}
else{
full.dat<-expr.list[[1]]
}
return(full.dat)
}
mpnst<-getDisMutationData("mpnst", "mskcc")
library(cgdsr)
library(data.table)
all.genes<<-unique(fread('../../data/ucsc_kgXref_hg19_2015_10_29.csv')$geneSymbol)
getSamplesForDisease<-function(dis='',study='tcga'){
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
all.studies<-getCancerStudies(mycgds)
ind=grep(paste(tolower(dis),paste(study,'$',sep=''),sep='_'),all.studies$cancer_study_id)
if(length(ind)==0)
return(c())
mycancerstudy<-all.studies$cancer_study_id[ind]
sampList<-lapply(mycancerstudy,function(cs){
caseLists<-getCaseLists(mycgds,cs)
samps<-unlist(strsplit(caseLists[match(paste(cs,'all',sep='_'),caseLists[,1]),5],split=' '))
#      allprofs<-getGeneticProfiles(mycgds,cs)[,1]
print(paste('Found',length(samps),'for',cs))
return(samps)
})
all.samps<-unique(unlist(sampList))
print(paste("Found",length(all.samps),'samples for',study,dis))
return(all.samps)
}
broad.cancer.types=c('brca','cellline','lcll','desm','dlbc','esca','hnsc','luad','mbl','skcm','mm','nsclc','es','prad')
mskcc.cancer.types=c('acyc','acbc','blca','coadread','luad','mpnst','thyroid','prad','hnc','sarc','scco')
tcga.cancer.types<-c('laml','acc','blca','lgg','brca','cesc','chol','coadread','esca','gbm','hnsc','kich','kirc','kirp','lihc','luad','lusc','dlbc','lgggbm','ov','nsclc','paad','thca','pcpg','prad','sarc','skcm','stad','tgct','thym','ucs','ucec','uvm')#meso has no sequence data
cell.line.tiss<-c('CENTRAL_NERVOUS_SYSTEM','BONE','PROSTATE','STOMACH','URINARY_TRACT','OVARY','HAEMATOPOIETIC_AND_LYMPHOID_TISSUE','KIDNEY','THYROID','SKIN','SOFT_TISSUE','SALIVARY_GLAND','LUNG','PLEURA','LIVER','ENDOMETRIUM','PANCREAS','BREAST','UPPER_AERODIGESTIVE_TRACT','LARGE_INTESTINE','AUTONOMIC_GANGLIA','OESOPHAGUS','BILIARY_TRACT','SMALL_INTESTINE')
getDisMutationData<-function(dis='',study='tcga'){
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
all.studies<-getCancerStudies(mycgds)
if(tolower(dis)=='alltcga')
dval=''
else
dval=dis
#if disease is blank will get all diseases
ind=grep(paste(tolower(dval),paste(study,'$',sep=''),sep='_'),all.studies$cancer_study_id)
print(paste('found',length(ind),study,'samples for disease',dis))
if(length(ind)==0)
return(NULL)
mycancerstudy<-all.studies$cancer_study_id[ind]
if(study=='tcga')
mycancerstudy=intersect(mycancerstudy,paste(tcga.cancer.types,study,sep='_'))
else if(study=='mskcc')
mycancerstudy=intersect(mycancerstudy,paste(mskcc.cancer.types,study,sep='_'))
else if(study=='broad')
mycancerstudy=intersect(mycancerstudy,paste(broad.cancer.types,study,sep='_'))
expr.list<-lapply(mycancerstudy,function(cs){
print(paste(cs,study,'Mutation data'))
caseLists<-getCaseLists(mycgds,cs)
allprofs<-getGeneticProfiles(mycgds,cs)[,1]
profile=allprofs[grep('mutations',allprofs)]
seqSamps=caseLists$case_list_id[grep('sequenced',caseLists$case_list_id)]
gene.groups=split(all.genes, ceiling(seq_along(all.genes)/400))
dat<-lapply(gene.groups,function(g) getProfileData(mycgds,g,profile,seqSamps))
ddat<-matrix()
for(i in which(sapply(dat,nrow)!=0)){
ddat<-cbind(ddat,dat[[i]])
}
nans<-which(apply(ddat,2,function(x) all(is.nan(x)||is.na(x))))
# nas<-which(apply(ddat,2,function(x) all(is.na(x))))
ddat<-ddat[,-nans]
##now set to binary matrix
dfdat<-apply(ddat,1,function(x){
sapply(unlist(x),function(y) !is.na(y) && y!='NaN')
})
return(dfdat)
})
if(length(expr.list)>1){
comm.genes<-c()#rownames(expr.list[[1]])
for(i in 1:length(expr.list))
comm.genes<-union(comm.genes,rownames(expr.list[[i]]))
full.dat<-do.call('cbind',lapply(expr.list,function(x){
missing<-setdiff(comm.genes,rownames(x))
print(length(missing))
if(length(missing)>0)
dat<-rbind(x[intersect(rownames(x),comm.genes),],
t(sapply(missing,function(y,x) rep(FALSE,ncol(x)),x)))
else{
dat<-x[intersect(rownames(x),comm.genes),]
}
colnames(dat)<-colnames(x)
dat<-dat[comm.genes,]
return(dat)
}))
}
else{
full.dat<-expr.list[[1]]
}
return(full.dat)
getDisMutationData<-function(dis='',study='tcga'){
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
all.studies<-getCancerStudies(mycgds)
if(tolower(dis)=='alltcga')
dval=''
else
dval=dis
#if disease is blank will get all diseases
ind=grep(paste(tolower(dval),paste(study,'$',sep=''),sep='_'),all.studies$cancer_study_id)
print(paste('found',length(ind),study,'samples for disease',dis))
if(length(ind)==0)
return(NULL)
mycancerstudy<-all.studies$cancer_study_id[ind]
if(study=='tcga')
mycancerstudy=intersect(mycancerstudy,paste(tcga.cancer.types,study,sep='_'))
else if(study=='mskcc')
mycancerstudy=intersect(mycancerstudy,paste(mskcc.cancer.types,study,sep='_'))
else if(study=='broad')
mycancerstudy=intersect(mycancerstudy,paste(broad.cancer.types,study,sep='_'))
expr.list<-lapply(mycancerstudy,function(cs){
print(paste(cs,study,'Mutation data'))
caseLists<-getCaseLists(mycgds,cs)
allprofs<-getGeneticProfiles(mycgds,cs)[,1]
profile=allprofs[grep('mutations',allprofs)]
seqSamps=caseLists$case_list_id[grep('sequenced',caseLists$case_list_id)]
gene.groups=split(all.genes, ceiling(seq_along(all.genes)/400))
dat<-lapply(gene.groups,function(g) getProfileData(mycgds,g,profile,seqSamps))
ddat<-matrix()
for(i in which(sapply(dat,nrow)!=0)){
ddat<-cbind(ddat,dat[[i]])
}
nans<-which(apply(ddat,2,function(x) all(is.nan(x)||is.na(x))))
# nas<-which(apply(ddat,2,function(x) all(is.na(x))))
ddat<-ddat[,-nans]
##now set to binary matrix
dfdat<-apply(ddat,1,function(x){
sapply(unlist(x),function(y) !is.na(y) && y!='NaN')
})
return(dfdat)
})
if(length(expr.list)>1){
comm.genes<-c()#rownames(expr.list[[1]])
for(i in 1:length(expr.list))
comm.genes<-union(comm.genes,rownames(expr.list[[i]]))
full.dat<-do.call('cbind',lapply(expr.list,function(x){
missing<-setdiff(comm.genes,rownames(x))
print(length(missing))
if(length(missing)>0)
dat<-rbind(x[intersect(rownames(x),comm.genes),],
t(sapply(missing,function(y,x) rep(FALSE,ncol(x)),x)))
else{
dat<-x[intersect(rownames(x),comm.genes),]
}
colnames(dat)<-colnames(x)
dat<-dat[comm.genes,]
return(dat)
}))
}
else{
full.dat<-expr.list[[1]]
}
return(full.dat)
}
mpnst<-getDisMutationData("mpnst", "mskcc")
)
getDisMutationData<-function(dis='',study='tcga'){
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
all.studies<-getCancerStudies(mycgds)
if(tolower(dis)=='alltcga')
dval=''
else
dval=dis
#if disease is blank will get all diseases
ind=grep(paste(tolower(dval),paste(study,'$',sep=''),sep='_'),all.studies$cancer_study_id)
print(paste('found',length(ind),study,'samples for disease',dis))
if(length(ind)==0)
return(NULL)
mycancerstudy<-all.studies$cancer_study_id[ind]
if(study=='tcga')
mycancerstudy=intersect(mycancerstudy,paste(tcga.cancer.types,study,sep='_'))
else if(study=='mskcc')
mycancerstudy=intersect(mycancerstudy,paste(mskcc.cancer.types,study,sep='_'))
else if(study=='broad')
mycancerstudy=intersect(mycancerstudy,paste(broad.cancer.types,study,sep='_'))
expr.list<-lapply(mycancerstudy,function(cs){
print(paste(cs,study,'Mutation data'))
caseLists<-getCaseLists(mycgds,cs)
allprofs<-getGeneticProfiles(mycgds,cs)[,1]
profile=allprofs[grep('mutations',allprofs)]
seqSamps=caseLists$case_list_id[grep('sequenced',caseLists$case_list_id)]
gene.groups=split(all.genes, ceiling(seq_along(all.genes)/400))
dat<-lapply(gene.groups,function(g) getProfileData(mycgds,g,profile,seqSamps))
ddat<-matrix()
for(i in which(sapply(dat,nrow)!=0)){
ddat<-cbind(ddat,dat[[i]])
}
nans<-which(apply(ddat,2,function(x) all(is.nan(x)||is.na(x))))
# nas<-which(apply(ddat,2,function(x) all(is.na(x))))
ddat<-ddat[,-nans]
##now set to binary matrix
dfdat<-apply(ddat,1,function(x){
sapply(unlist(x),function(y) !is.na(y) && y!='NaN')
})
return(dfdat)
})
if(length(expr.list)>1){
comm.genes<-c()#rownames(expr.list[[1]])
for(i in 1:length(expr.list))
comm.genes<-union(comm.genes,rownames(expr.list[[i]]))
full.dat<-do.call('cbind',lapply(expr.list,function(x){
missing<-setdiff(comm.genes,rownames(x))
print(length(missing))
if(length(missing)>0)
dat<-rbind(x[intersect(rownames(x),comm.genes),],
t(sapply(missing,function(y,x) rep(FALSE,ncol(x)),x)))
else{
dat<-x[intersect(rownames(x),comm.genes),]
}
colnames(dat)<-colnames(x)
dat<-dat[comm.genes,]
return(dat)
}))
}
else{
full.dat<-expr.list[[1]]
}
return(full.dat)
}
mpnst<-getDisMutationData("mpnst", "mskcc")
View(mpnst)
nf1<-mpnst[,NF1]
nf1<-mpnst[NF1,]
nf1<-mpnst["NF1",]
mpnst$gene<-rownames(mpnst)
mpnst<-getDisMutationData("mpnst", "mskcc")
map<-sapply(data$Sample.Name[1:5], function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
})
View(map)
map<-sapply(data$Sample.Name, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
})
map<-sapply(data$Sample.Name, function(x){
y<-get_csid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
})
map<-sapply(data$Sample.Name[1], function(x){
y<-get_csid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
})
map<-sapply(data$Sample.Name[1], function(x){
y<-get_csid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
})
map<-sapply(data$Sample.Name[1], function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
})
View(map)
map<-sapply(data$Sample.Name[1], function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
z<-cir_query(y, representation = "smiles")
map<-c(x,y,z)
unname(map)
map
})
install.packages("rpubchem")
warnings()
library(rpubchem)
map<-sapply(data$Sample.Name[1], function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
#z<-cir_query(y, representation = "smiles")
#map<-c(x,y,z)
map<-get.cid(y)
#unname(map)
map
})
View(map)
map<-sapply(data$Sample.Name[1], function(x){
y<-get.synonyms(x)
#z<-cir_query(y, representation = "smiles")
#map<-c(x,y,z)
map<-get.cid(y)
#unname(map)
map
})
map<-sapply(data$Sample.Name[1], function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
#z<-cir_query(y, representation = "smiles")
#map<-c(x,y,z)
map<-t(get.cid(y))$Canonical.SMILES
#unname(map)
map
})
map<-sapply(data$Sample.Name[1], function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
#z<-cir_query(y, representation = "smiles")
#map<-c(x,y,z)
foo<-get.cid(y)
foo
})
View(map)
map<-sapply(data$Sample.Name, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
unname(map)
map
})
View(mpnst)
warnings
warnings()
View(map)
map<-t(map)
View(map)
View(data)
map<-distinct(t(map))
map<-distinct(map)
map<-sapply(unique(data$Sample.Name), function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
unname(map)
map
})
View(map)
map<-t(map)
mols<-unique(data$Sample.Name)
drugdat<-read.table(x, sep = ",", header = TRUE, fill = NA)
mols<-unique(drugdat$Sample.Name)
View(mols)
mols
map<-sapply(mols), function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
unname(map)
map
})
View(drugdat)
map<-sapply(mols), function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
unname(map)
map
})
map<-sapply(mols, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
unname(map)
map
})
mols<-unique(drugdat$Sample.Name)[1:2]
map<-sapply(mols, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
map<-c(x,y)
unname(map)
map
})
View(map)
View(map)
sapply
map<-sapply(mols, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
})
map
as.data.frame(map)
map<-as.data.frame(map)
View(map)
cid<-sapply(mols, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
})
cid<-as.data.frame(cid)
mols<-unique(drugdat$Sample.Name)
cid<-sapply(mols, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
})
warnings()
cid<-as.data.frame(cid)
unlabeled<-filter(cid, is.na(cid))
View(unlabeled)
View(cid)
unlabeled<-cid[is.na(cid$cid)]
unlabeled<-cid[,is.na(cid$cid)]
unlabeled<-cid$cid[is.na(cid$cid)]
unlabeled<-rownames(cid$cid[is.na(cid$cid)])
cid<-as.data.frame(cid)
unlabeled<-rownames(cid$cid[is.na(cid$cid)])
unlabeled<-rownames(is.na(cid$cid))
View(cid)
cid$compound<-rownames(cid)
unlabeled<-filter(cid, is.na(cid))
View(unlabeled)
cid2<-sapply(unlabeled$compound, function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
warnings()
cid2<-as.data.frame(cid2)
View(cid2)
cid2<-sapply(rownames(unlabled), function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
cid2<-sapply(rownames(unlabeled), function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
cid2<-as.data.frame(cid2)
View(cid2)
View(unlabeled)
unlabeled<-gsub("?", "", unlabled)
unlabeled<-gsub("?", "", unlabeled)
unlabeled<-filter(cid, is.na(cid))
unlabeled<-gsub("?", "", unlabeled)
unlabeled<-filter(cid, is.na(cid))
unlabeled$compound<-gsub("?", "", unlabeled$compound)
View(unlabeled)
unlabeled$compound<-sub("?", "", unlabeled$compound)
unlabeled$compound<-sub("???", "", unlabeled$compound)
?
unlabeled$compound<-sub("??", "", unlabeled$compound)
)
unlabeled$compound<-sub("??", "", unlabeled$compound)
unlabeled$compound<-sub("??", "", unlabeled$compound)
unlabeled<-filter(cid, is.na(cid))
unlabeled$compound<-sub("???", "", unlabeled$compound)
unlabeled$compound<-sub("\\?", "", unlabeled$compound)
unlabeled$compound<-sub("\\??", "", unlabeled$compound)
unlabeled$compound<-sub("\\?\\?", "", unlabeled$compound)
unlabeled$compound<-sub("\\?", "", unlabeled$compound)
cid2<-sapply(, function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
mols2<-unlabeled$compound
cid2<-sapply(mols2, function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
lab1<-filter(cid, !is.na(cid))
cid2<-as.data.frame(cid2)
View(cid2)
unlabeled<-filter(cid2, is.na(cid2))
View(cid)
mols
mols
cid2<-sapply(mols, function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
mols2<-unname(unlabeled$compound)
View(unlabeled)
unlabeled<-filter(cid, is.na(cid))
unlabeled$compound<-sub("\\?", "", unlabeled$compound)
unlabeled$compound<-sub("\\?\\?", "", unlabeled$compound)
unlabeled$compound<-sub("\\?", "", unlabeled$compound)
mols2<-unlabeled$compound
mols2<-unname(unlabeled$compound)
cid2<-sapply(mols, function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
cid2<-sapply(mols2, function(x){
y<-get_cid(x, first = TRUE, verbose = TRUE)
})
cid2<-as.data.frame(cid2)
View(cid2)
cid2<-sapply(mols2, function(x){
y<-get_cid(x, from="name", first = TRUE, verbose = TRUE)
})
cid2<-as.data.frame(cid2)
View(cid2)
View(cid2)
